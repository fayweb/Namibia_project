"phylum",
"superkingdom"
)
# üî¨ Combined 16S Selection Vector
microbiome_16s_vars <- c(barcode_vars_16s, otu_16s_vars)
# ***********************************************************
# 28S Sequencing Variables
# ***********************************************************
# üß¨ 28S Barcode & Sequencing Metadata
barcode_vars_28s <- c("barcode_28s")
count_vars_28s   <- c("count_28s")
metadata_vars_28s <- c("Date_28s_PCR", "Gene")
# üß™ 28S Taxonomic Assignments (same structure as 16S)
taxonomy_vars_shared <- c("tax_id", "species", "genus",
"family", "order", "class",
"phylum", "superkingdom")
# üî¨ Combined 28S Selection Vector
otu_28s_vars <- c(barcode_vars_28s, count_vars_28s,
taxonomy_vars_shared, metadata_vars_28s)
# ***********************************************************
# Part 3: Data Cleaning - Rodent Field Data ----
# ***********************************************************
#----------------------------------------------------------*
# 3.1: Import & Clean Rodent Field Data
#----------------------------------------------------------*
message("\nüîπ Step 3.1: Cleaning rodent field data...")
source(file.path(scripts_dir, "preprocessing", "1_import_clean_field_data.R"))
#----------------------------------------------------------*
# 3.1a: Nanodrop DNA Quality Assessment in the Field
#----------------------------------------------------------*
#message("\nüîπ Step 3.1a: Archiving early Nanodrop DNA QC (field)...")
#source(file.path(scripts_dir, "preprocessing", "01a_nanodrop_field_qc.R"))
#----------------------------------------------------------*
# 3.3: AMPure Cleanup QC (Marly)
#----------------------------------------------------------*
#message("\nüîπ Step 3.3: Processing DNA cleanup QC from AMPure protocol...")
#source(file.path(scripts_dir, "preprocessing", "03_dna_cleaning_qc_marly.R"))
# ***********************************************************
# Part 4: Taxonomic Processing - OTU & Phylogenetic Analysis ----
# ***********************************************************
#----------------------------------------------------------*
#----------------------------------------------------------*
# 4.1a: Rename OTU Columns Using Sample Metadata
#----------------------------------------------------------*
message("\nüîπ Step 4.1a: Linking barcode names to rodent data frame")
source(file.path(scripts_dir, "preprocessing", "02_link_barcode_to_metadata.R"))
#----------------------------------------------------------*
# 4.1b: Renamed EMU OTU Tables - Marly vs Melanie
#----------------------------------------------------------*
# üìÑ Documentation:
#   - EMU outputs and filtering description:
#     ‚ñ∏ Protocols/Data_processing/EMU_outputs_documentation.md
#----------------------------------------------------------*
#----------------------------------------------------------*
# 4.1c: Integrate OTU Tables + Taxonomy + Rodent Metadata
#----------------------------------------------------------*
# Purpose:
#   - Clean and pivot Marly's and Melanie's OTU count tables
#   - Join with EMU taxonomy assignments
#   - Integrate with rodent metadata using barcodes
#   - Save fully annotated OTU tables separately for each filtering strategy
#
# üìÑ Script: Scripts/Preprocessing/04a_merge_otu_tables_to_metadata.R
# üìÇ Outputs:
#   - otu_taxonomy_metadata_marly.csv    (standard filtering)
#   - otu_taxonomy_metadata_melanie.csv (lenient filtering)
message(
"\nüîπ Step 4.1c: Integrating OTU counts with taxonomy and rodent metadata...")
source(
file.path(scripts_dir, "preprocessing", "04a_merge_otu_tables_to_metadata.R"))
#----------------------------------------------------------*
# 4.1d: Compare EMU Filtering Pipelines
#----------------------------------------------------------*
# This step runs a full RMarkdown comparison between two
# EMU OTU filtering strategies:
#   - Marly's standard filtering
#   - Melanie's lenient filtering
# üìÇ Outputs:
#   ‚ñ∏ HTML report:
# Protocols/Data_processing/04b_compare_filtering_marly_vs_melanie.html
#   ‚ñ∏ PDF report:
# Protocols/Data_processing/Comparison_filtering_strategies_Marly_Melanie.pdf
#
# 4.1d: Compare filtering strategies and save report to protocols folder
#message("\nüîπ
#Step 4.1d: Comparing filtering approaches from Marly and Melanie...")
#rmarkdown::render(
# input = file.path(scripts_dir, "preprocessing",
#"04b_compare_filtering_marly_vs_melanie.Rmd"),
#knit_root_dir = project_root,
#  output_file = "04b_compare_filtering_marly_vs_melanie.html",
# output_dir = file.path(project_root, "Protocols", "Data_processing")
#)
#----------------------------------------------------------*
# 4.1e: Select Final Filtering Strategy for Downstream Analysis
#----------------------------------------------------------*
# Based on comparisons in 04b_compare_filtering_marly_vs_melanie.Rmd,
# we selected Marly's standard filtering for all downstream microbiome analyses.
# This script copies the final annotated OTU table and standardizes
# its name for clarity and reproducibility.
# üìÑ Script: Scripts/Preprocessing/04c_select_final_filtering_output.R
# üìÇ Outputs:
#   - otu_taxonomy_metadata_final.csv
#     (used for diversity, phyloseq, and downstream community analysis)
message("\nüîπ Step 4.1e: Finalizing selection of
Marly's filtered EMU output...")
source(file.path(scripts_dir, "preprocessing",
"04c_select_final_filtering_output.R"))
#----------------------------------------------------------*
# 4.2: Integrate EMU 28S Output from Emanuel Heitlinger
#----------------------------------------------------------*
# Purpose:
#   - Load 28S EMU output and sample metadata from Emanuel
#   - Filter for rodent samples only
#   - Join with rodent metadata
#   - Annotate and prepare for parasite-focused analysis
#
# üìÑ Script: Scripts/Preprocessing/05a_mouse_parasite_28s_analysis.R
# üìÇ Outputs:
#   - rodent_data with merged 28S data
#   - Used later for parasite diversity and re-clustering
message("\nüîπ Step 4.2: Annotating 28S EMU output from Emanuel
and joining to rodent metadata...")
source(file.path(scripts_dir, "preprocessing",
"05a_mouse_parasite_28s_analysis.R"))
message("üì¶ Constructing phyloseq object from preprocessed 16S dataset...")
# -----------------------------------------------------------
# Step 1: Load preprocessed OTU + taxonomy + metadata table
# -----------------------------------------------------------
otu_path <- file.path(processed_data, "EMU_output", "marly_standard_filtering", "otu_16s_for_phyloseq.csv")
otu_df <- readr::read_csv(otu_path, show_col_types = FALSE)
message("‚úîÔ∏è Loaded: ", nrow(otu_df), " rows of 16S data with metadata")
# -----------------------------------------------------------
# Step 2: Create OTU table (rows = taxa, cols = samples)
# -----------------------------------------------------------
otu_long <- otu_df %>%
dplyr::select(Sample_ID, tax_id, count_16s)
View(otu_long)
View(otu_df)
otu_df <- readr::read_csv(otu_path, show_col_types = FALSE)
message("‚úîÔ∏è Loaded: ", nrow(otu_df), " rows of 16S data with metadata")
View(otu_long)
View(otu_df)
message("üì¶ Constructing phyloseq object from preprocessed 16S dataset...")
# -----------------------------------------------------------
# Step 1: Load preprocessed OTU + taxonomy + metadata table
# -----------------------------------------------------------
otu_path <- file.path(processed_data, "EMU_output", "marly_standard_filtering",
"otu_16s_for_phyloseq.csv")
otu_df <- readr::read_csv(otu_path, show_col_types = FALSE)
message("‚úîÔ∏è Loaded: ", nrow(otu_df), " rows of 16S data with metadata")
View(otu_df)
View(otu_df)
?rename
colnames(otu_df)
# remove the column sample ID and rename the sample-barcode merge to Sample ID
# this will ensure that we differentiate between subsamples
otu_df <- otu_df %>%
dplyr::select(-Sample_ID) %>%
dplyr::rename(Sample_ID = Sample_ID_phyloseq)
message("‚úîÔ∏è Loaded: ", nrow(otu_df), " rows of 16S data with metadata")
View(otu_df)
# -----------------------------------------------------------
# Step 2: Create OTU table (rows = taxa, cols = samples)
# -----------------------------------------------------------
otu_long <- otu_df %>%
dplyr::select(Sample_ID, tax_id, count_16s)
# -----------------------------------------------------------
# Step 2: Create OTU table (rows = taxa, cols = samples)
# -----------------------------------------------------------
otu_wide <- otu_long %>%
dplyr::group_by(tax_id, Sample_ID) %>%
dplyr::summarise(count_16s = sum(count_16s, na.rm = TRUE),
.groups = "drop") %>%
tidyr::pivot_wider(
names_from = Sample_ID,
values_from = count_16s,
values_fill = list(count_16s = 0)
) %>%
tibble::column_to_rownames("tax_id")
otu_table_ps <- phyloseq::otu_table(as.matrix(otu_wide), taxa_are_rows = TRUE)
# -----------------------------------------------------------
# Step 3: Create Taxonomy Table (rows = taxa)
# -----------------------------------------------------------
taxonomy_df <- otu_df %>%
dplyr::select(tax_id, species, genus, family, order, class, phylum, superkingdom) %>%
dplyr::distinct(tax_id, .keep_all = TRUE) %>%
tibble::column_to_rownames("tax_id")
tax_table_ps <- phyloseq::tax_table(as.matrix(taxonomy_df))
# -----------------------------------------------------------
# Step 4: Create Sample Metadata Table (rows = samples)
# -----------------------------------------------------------
sample_metadata_df <- otu_df %>%
dplyr::select(Sample_ID, all_of(trapping_vars), conc_16s__PCR, Gene) %>%
dplyr::distinct(Sample_ID, .keep_all = TRUE) %>%
dplyr::filter(!is.na(Sample_ID)) %>%
tibble::column_to_rownames("Sample_ID")
sample_data_ps <- phyloseq::sample_data(sample_metadata_df)
# -----------------------------------------------------------
# Step 5: Construct phyloseq object
# -----------------------------------------------------------
ps_16s_final <- phyloseq::phyloseq(
otu_table_ps,
tax_table_ps,
sample_data_ps
)
message("‚úÖ Successfully constructed phyloseq object with ",
phyloseq::nsamples(ps_16s_final), " samples and ",
phyloseq::ntaxa(ps_16s_final), " taxa.")
# -----------------------------------------------------------
# Step 6: Save output
# -----------------------------------------------------------
phyloseq_out_path <- file.path(processed_data, "phyloseq_16s_final.rds")
saveRDS(ps_16s_final, file = phyloseq_out_path)
message("üíæ Saved phyloseq object to: ", phyloseq_out_path)
# -----------------------------------------------------------
# Step 7: Clean Environment (Optional but Recommended)
# -----------------------------------------------------------
# Remove intermediate objects used only for construction
rm(
otu_df, otu_long, otu_wide,
taxonomy_df, tax_table_ps,
sample_metadata_df, sample_data_ps
)
message("üßπ Cleaned up temporary objects from environment.")
glimpse(ps_16s_final)
pacman::p_load(
tidyverse, janitor, readr, lubridate, ggplot2, phyloseq, vegan,
corrplot, patchwork, ggrepel, RColorBrewer, pheatmap, caret,
randomForest, rfUtilities, optimx, ggpubr, FactoMineR, factoextra,
leaflet, kableExtra, broom, magrittr, data.table, sf, rnaturalearth,
RColorBrewer, tmap, mapview, cowplot, magick, readxl, qgraph, vegan, ggvenn,
decontam
)
# -----------------------------------------------------------
# Step 7: Clean Environment
# -----------------------------------------------------------
# Remove intermediate objects used only for construction
rm(
otu_df, otu_long, otu_wide,
taxonomy_df, tax_table_ps,
sample_metadata_df, sample_data_ps, ps_16s_final
)
# ------------------------------------------------------------
# Step 1: Load phyloseq object
# ------------------------------------------------------------
ps <- readRDS(file.path(processed_data, "phyloseq_16s_final.rds"))
message("‚úÖ Loaded phyloseq object: ", nsamples(ps), " samples")
# ------------------------------------------------------------
# Step 2: Visualize library size per sample
# ------------------------------------------------------------
sample_data(ps)$LibrarySize <- sample_sums(ps)
ggplot(as.data.frame(sample_data(ps)),
aes(x = reorder(rownames(sample_data(ps)), LibrarySize),
y = LibrarySize,
color = sample_or_control)) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_blank()) +
labs(x = "Sample Index", y = "Library Size (reads)", title = "Read Depth by Sample Type")
View(ps)
ggplot(as.data.frame(sample_data(ps)),
aes(x = reorder(rownames(sample_data(ps)), LibrarySize),
y = LibrarySize,
color = Sample_ID)) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_blank()) +
labs(x = "Sample Index", y = "Library Size (reads)", title = "Read Depth by Sample Type")
# ------------------------------------------------------------
# Step 1: Load phyloseq object
# ------------------------------------------------------------
ps <- readRDS(file.path(processed_data, "phyloseq_16s_final.rds"))
message("‚úÖ Loaded phyloseq object: ", nsamples(ps), " samples")
# ------------------------------------------------------------
# Step 2: Visualize library size per sample
# ------------------------------------------------------------
sample_data(ps)$LibrarySize <- sample_sums(ps)
ggplot(as.data.frame(sample_data(ps)),
aes(x = reorder(rownames(sample_data(ps)), LibrarySize),
y = LibrarySize,
color = Sample_ID)) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_blank()) +
labs(x = "Sample Index", y = "Library Size (reads)", title = "Read Depth by Sample Type")
ggplot(as.data.frame(sample_data(ps)),
aes(x = reorder(rownames(sample_data(ps)), LibrarySize),
y = LibrarySize,
color = sample_or_control)) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_blank()) +
labs(x = "Sample Index", y = "Library Size (reads)", title = "Read Depth by Sample Type")
message("üì¶ Constructing phyloseq object from preprocessed 16S dataset...")
# -----------------------------------------------------------
# Step 1: Load preprocessed OTU + taxonomy + metadata table
# -----------------------------------------------------------
otu_path <- file.path(processed_data, "EMU_output", "marly_standard_filtering",
"otu_16s_for_phyloseq.csv")
otu_df <- readr::read_csv(otu_path, show_col_types = FALSE)
# remove the column sample ID and rename the sample-barcode merge to Sample ID
# this will ensure that we differentiate between subsamples
otu_df <- otu_df %>%
dplyr::select(-Sample_ID) %>%
dplyr::rename(Sample_ID = Sample_ID_phyloseq)
message("‚úîÔ∏è Loaded: ", nrow(otu_df), " rows of 16S data with metadata")
glimpse(otu_df)
# -----------------------------------------------------------
# Step 2: Create OTU table (rows = taxa, cols = samples)
# -----------------------------------------------------------
otu_long <- otu_df %>%
dplyr::select(Sample_ID, tax_id, count_16s)
# -----------------------------------------------------------
# Step 2: Create OTU table (rows = taxa, cols = samples)
# -----------------------------------------------------------
otu_wide <- otu_long %>%
dplyr::group_by(tax_id, Sample_ID) %>%
dplyr::summarise(count_16s = sum(count_16s, na.rm = TRUE),
.groups = "drop") %>%
tidyr::pivot_wider(
names_from = Sample_ID,
values_from = count_16s,
values_fill = list(count_16s = 0)
) %>%
tibble::column_to_rownames("tax_id")
otu_table_ps <- phyloseq::otu_table(as.matrix(otu_wide), taxa_are_rows = TRUE)
glimpse(otu_wide)
glimpse(otu_table_ps)
# -----------------------------------------------------------
# Step 3: Create Taxonomy Table (rows = taxa)
# -----------------------------------------------------------
taxonomy_df <- otu_df %>%
dplyr::select(tax_id, species, genus, family, order, class, phylum, superkingdom) %>%
dplyr::distinct(tax_id, .keep_all = TRUE) %>%
tibble::column_to_rownames("tax_id")
tax_table_ps <- phyloseq::tax_table(as.matrix(taxonomy_df))
glimpse(taxonomy_df)
glimpse(tax_table_ps)
# -----------------------------------------------------------
# Step 4: Create Sample Metadata Table (rows = samples)
# -----------------------------------------------------------
sample_metadata_df <- otu_df %>%
dplyr::select(Sample_ID, all_of(trapping_vars), conc_16s__PCR, Gene) %>%
dplyr::distinct(Sample_ID, .keep_all = TRUE) %>%
dplyr::filter(!is.na(Sample_ID)) %>%
tibble::column_to_rownames("Sample_ID")
sample_data_ps <- phyloseq::sample_data(sample_metadata_df)
glimpse(sample_metadata_df)
gimpse(sample_data_ps)
glimpse(sample_data_ps)
sample_data_ps <- phyloseq::sample_data(sample_metadata_df)
glimpse(sample_data_ps)
# -----------------------------------------------------------
# Step 5: Construct phyloseq object
# -----------------------------------------------------------
ps_16s_final <- phyloseq::phyloseq(
otu_table_ps,
tax_table_ps,
sample_data_ps
)
message("‚úÖ Successfully constructed phyloseq object with ",
phyloseq::nsamples(ps_16s_final), " samples and ",
phyloseq::ntaxa(ps_16s_final), " taxa.")
glimpse(ps_16s_final)
# -----------------------------------------------------------
# Step 6: Save output
# -----------------------------------------------------------
phyloseq_out_path <- file.path(processed_data, "phyloseq_16s_final.rds")
saveRDS(ps_16s_final, file = phyloseq_out_path)
message("üíæ Saved phyloseq object to: ", phyloseq_out_path)
# -----------------------------------------------------------
# Step 7: Clean Environment
# -----------------------------------------------------------
# Remove intermediate objects used only for construction
rm(
otu_df, otu_long, otu_wide,
taxonomy_df, tax_table_ps,
sample_metadata_df, sample_data_ps, ps_16s_final
)
message("üßπ Cleaned up temporary objects from environment.")
message("üì¶ Constructing phyloseq object from preprocessed 16S dataset...")
# -----------------------------------------------------------
# Step 1: Load preprocessed OTU + taxonomy + metadata table
# -----------------------------------------------------------
otu_path <- file.path(processed_data, "EMU_output", "marly_standard_filtering", "otu_16s_for_phyloseq.csv")
otu_df <- readr::read_csv(otu_path, show_col_types = FALSE)
# Rename barcode-merged ID to Sample_ID (e.g. R01__barcode01)
otu_df <- otu_df %>%
dplyr::select(-Sample_ID) %>%
dplyr::rename(Sample_ID = Sample_ID_phyloseq)
message("‚úîÔ∏è Loaded: ", nrow(otu_df), " rows of 16S data with metadata")
# -----------------------------------------------------------
# Step 2: Create OTU Table (rows = taxa, cols = samples)
# -----------------------------------------------------------
otu_wide <- otu_df %>%
dplyr::select(Sample_ID, tax_id, count_16s) %>%
dplyr::group_by(tax_id, Sample_ID) %>%
dplyr::summarise(count_16s = sum(count_16s, na.rm = TRUE), .groups = "drop") %>%
tidyr::pivot_wider(
names_from = Sample_ID,
values_from = count_16s,
values_fill = list(count_16s = 0)
) %>%
tibble::column_to_rownames("tax_id")
otu_table_ps <- phyloseq::otu_table(as.matrix(otu_wide), taxa_are_rows = TRUE)
# -----------------------------------------------------------
# Step 3: Create Taxonomy Table
# -----------------------------------------------------------
taxonomy_df <- otu_df %>%
dplyr::select(tax_id, species, genus, family, order, class, phylum, superkingdom) %>%
dplyr::distinct(tax_id, .keep_all = TRUE) %>%
tibble::column_to_rownames("tax_id")
tax_table_ps <- phyloseq::tax_table(as.matrix(taxonomy_df))
# -----------------------------------------------------------
# Step 4: Create Sample Metadata Table
# -----------------------------------------------------------
sample_metadata_df <- otu_df %>%
dplyr::select(Sample_ID, barcode_16s, is_control, sample_or_control,
all_of(trapping_vars), conc_16s__PCR, Gene) %>%
dplyr::distinct(Sample_ID, .keep_all = TRUE) %>%
dplyr::filter(!is.na(Sample_ID)) %>%
tibble::column_to_rownames("Sample_ID")
sample_data_ps <- phyloseq::sample_data(sample_metadata_df)
# -----------------------------------------------------------
# Step 5: Combine into Phyloseq Object
# -----------------------------------------------------------
ps_16s_final <- phyloseq::phyloseq(
otu_table_ps,
tax_table_ps,
sample_data_ps
)
message("‚úÖ Successfully constructed phyloseq object with ",
phyloseq::nsamples(ps_16s_final), " samples and ",
phyloseq::ntaxa(ps_16s_final), " taxa.")
# -----------------------------------------------------------
# Step 6: Save Output
# -----------------------------------------------------------
phyloseq_out_path <- file.path(processed_data, "phyloseq_16s_final.rds")
saveRDS(ps_16s_final, file = phyloseq_out_path)
message("üíæ Saved phyloseq object to: ", phyloseq_out_path)
# -----------------------------------------------------------
# Step 7: Clean Environment
# -----------------------------------------------------------
rm(list = c("otu_path", "otu_df", "otu_wide", "otu_table_ps",
"taxonomy_df", "tax_table_ps",
"sample_metadata_df", "sample_data_ps", "ps_16s_final"))
message("üßπ Cleaned up temporary objects from environment.")
# 5.1: Construct Phyloseq Object (16S) ------------------------
source(file.path(scripts_dir, "Analysis", "0_construct_phyloseq.R"))
# ------------------------------------------------------------
# Step 1: Load phyloseq object
# ------------------------------------------------------------
ps <- readRDS(file.path(processed_data, "phyloseq_16s_final.rds"))
message("‚úÖ Loaded phyloseq object: ", nsamples(ps), " samples")
# ------------------------------------------------------------
# Step 2: Visualize library size per sample
# ------------------------------------------------------------
sample_data(ps)$LibrarySize <- sample_sums(ps)
ggplot(as.data.frame(sample_data(ps)),
aes(x = reorder(rownames(sample_data(ps)), LibrarySize),
y = LibrarySize,
color = sample_data(ps)$sample_or_control)) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_blank()) +
labs(x = "Sample Index", y = "Library Size (reads)", title = "Read Depth by Sample Type")
# ------------------------------------------------------------
# Step 3: Identify contaminants using DNA concentration
# ------------------------------------------------------------
sample_data(ps)$is.neg <- sample_data(ps)$sample_or_control == "control"
contam_df <- isContaminant(ps,
method = "combined",
neg = "is.neg",
conc = "conc_16s__PCR",
threshold = 0.2)
message("üß™ Identified contaminants: ", sum(contam_df$contaminant), "/", nrow(contam_df))
# ------------------------------------------------------------
# Step 4: Visualize prevalence in controls vs. samples
# ------------------------------------------------------------
ps.pa <- transform_sample_counts(ps, function(x) 1*(x > 0))
ps.pa.neg <- prune_samples(sample_data(ps.pa)$sample_or_control == "control", ps.pa)
ps.pa.pos <- prune_samples(sample_data(ps.pa)$sample_or_control == "sample", ps.pa)
df.pa <- data.frame(
pa.neg = taxa_sums(ps.pa.neg),
pa.pos = taxa_sums(ps.pa.pos),
contaminant = contam_df$contaminant
)
ggplot(df.pa, aes(x = pa.neg, y = pa.pos, color = contaminant)) +
geom_point(alpha = 0.7) +
scale_color_manual(values = c("black", "red")) +
theme_minimal() +
labs(title = "Prevalence: Contaminants vs. Non-Contaminants",
x = "Prevalence in Neg. Controls",
y = "Prevalence in True Samples")
# ------------------------------------------------------------
# Step 5: Prune contaminants from phyloseq object
# ------------------------------------------------------------
contaminant_taxa <- rownames(contam_df)[contam_df$contaminant]
ps_decont <- prune_taxa(!taxa_names(ps) %in% contaminant_taxa, ps)
message("üßº Removed contaminants ‚Äî new taxa count: ", ntaxa(ps_decont))
# ------------------------------------------------------------
# Step 6: Save cleaned phyloseq object
# ------------------------------------------------------------
decont_output_path <- file.path(processed_data, "phyloseq_16s_decontaminated.rds")
saveRDS(ps_decont, file = decont_output_path)
message("üíæ Saved decontaminated phyloseq object to: ", decont_output_path)
# ------------------------------------------------------------
# Step 7: Clean up
# ------------------------------------------------------------
rm(contam_df, df.pa, ps.pa, ps.pa.neg, ps.pa.pos, contaminant_taxa)
message("üßπ Cleaned up temporary objects.")
