# Handle missing values
rodent_data <- rodent_data %>%
mutate(Sex = ifelse(Sex == "", "unidentified", Sex)) %>%
mutate(Sex = gsub("63", "unidentified", Sex))
# Save cleaned dataset
write_csv(rodent_data, "Data/processed/cleaned_rodent_data.csv")
message("âœ… Rodent field data cleaned successfully!")
# ***********************************************************
# Title: Namibia Rodent Project - Data Processing & Analysis
# Purpose: This script executes all processing & analysis steps
#          for the rodent microbiome sequencing study.
#
# Authors: Fay Webster, Marly Erazo, Otto Netzel, Lilla Jordan,
#          Emanuel Heitlinger, Conor Noonan, Dong Xia, Melanie Hay
#
# Date: 2024-10-15
# ***********************************************************
# ***********************************************************
# Part 1: Set Standard Settings & Load Libraries ----
# ***********************************************************
# Increase max overlaps for better plotting
options(ggrepel.max.overlaps = Inf)
# Set a reproducible seed
set.seed(13102023)
# Load & install required packages using pacman
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(
tidyverse, janitor, readr, lubridate, ggplot2, phyloseq, vegan,
corrplot, patchwork, ggrepel, RColorBrewer, pheatmap, caret,
randomForest, rfUtilities, optimx, ggpubr, FactoMineR, factoextra,
leaflet, kableExtra, broom, magrittr, data.table
)
# ***********************************************************
# Part 2: Define Project File Paths ----
# ***********************************************************
# Dynamically detect the working directory
project_root <- here::here()
# Define primary directories
data_dir       <- file.path(project_root, "data")
raw_data       <- file.path(data_dir, "raw")
field_raw_tracking <- file.path(raw_data, "Field_tracking_data")
processed_data <- file.path(data_dir, "processed")
metadata_dir   <- file.path(data_dir, "metadata")
results_dir    <- file.path(project_root, "results")
figures_dir    <- file.path(results_dir, "figures")
tables_dir     <- file.path(results_dir, "tables")
scripts_dir    <- file.path(project_root, "scripts")
# ***********************************************************
# Part 3: Data Cleaning - Rodent Field Data ----
# ***********************************************************
#----------------------------------------------------------*
# 3.1: Import & Clean Rodent Field Data
#----------------------------------------------------------*
# 3.1: Import & Clean Rodent Field Data
#----------------------------------------------------------*
message("\nðŸ”¹ Step 3.1: Cleaning rodent field data...")
source(file.path(scripts_dir, "preprocessing", "import_clean_field_data.R"))
# Count species occurrences
species_count <- rodent_data %>%
group_by(Morphology_species) %>%
summarize(count = n())
# Generate bar plot
p <- ggplot(species_count, aes(x = Morphology_species, y = count, fill = Morphology_species)) +
geom_bar(stat = "identity") +
labs(title = "Distribution of Rodent Species", x = "Species", y = "Count") +
theme_minimal()
p
# Save plot
ggsave("results/figures/species_distribution.png", p, width = 10, height = 7, dpi = 300)
message("âœ… Species distribution plot saved!")
# Convert dataset to spatial object
df_sf <- st_as_sf(rodent_data, coords = c("Longitude", "Latitude"), crs = 4326)
# Generate interactive map
leaflet(df_sf) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~Morphology_species,
color = ~factor(Morphology_species),
radius = 3, opacity = 0.8) %>%
addLegend("bottomright", pal = colorFactor(topo.colors(10), rodent_data$Morphology_species),
values = ~Morphology_species, title = "Species")
# Convert dataset to spatial object
df_sf <- st_as_sf(rodent_data, coords = c("Longitude", "Latitude"), crs = 4326)
pacman::p_load(
tidyverse, janitor, readr, lubridate, ggplot2, phyloseq, vegan,
corrplot, patchwork, ggrepel, RColorBrewer, pheatmap, caret,
randomForest, rfUtilities, optimx, ggpubr, FactoMineR, factoextra,
leaflet, kableExtra, broom, magrittr, data.table, sf
)
# Generate interactive map
leaflet(df_sf) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~Morphology_species,
color = ~factor(Morphology_species),
radius = 3, opacity = 0.8) %>%
addLegend("bottomright", pal = colorFactor(topo.colors(10), rodent_data$Morphology_species),
values = ~Morphology_species, title = "Species")
# Convert dataset to spatial object
df_sf <- st_as_sf(rodent_data, coords = c("Longitude", "Latitude"), crs = 4326)
# Generate interactive map
leaflet(df_sf) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~Morphology_species,
color = ~factor(Morphology_species),
radius = 3, opacity = 0.8) %>%
addLegend("bottomright", pal = colorFactor(topo.colors(10), rodent_data$Morphology_species),
values = ~Morphology_species, title = "Species")
# Convert dataset to spatial object
df_sf <- st_as_sf(rodent_data, coords = c("Longitude", "Latitude"), crs = 4326)
# Generate interactive map
leaflet(df_sf) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~Morphology_species,
color = ~factor(Morphology_species),
radius = 3, opacity = 0.8) %>%
addLegend("bottomright", pal = colorFactor(topo.colors(10), rodent_data$Morphology_species),
values = ~Morphology_species, title = "Species")
pacman::p_load(
tidyverse, janitor, readr, lubridate, ggplot2, phyloseq, vegan,
corrplot, patchwork, ggrepel, RColorBrewer, pheatmap, caret,
randomForest, rfUtilities, optimx, ggpubr, FactoMineR, factoextra,
leaflet, kableExtra, broom, magrittr, data.table, sf, rnaturalearth
)
pacman::p_load(
tidyverse, janitor, readr, lubridate, ggplot2, phyloseq, vegan,
corrplot, patchwork, ggrepel, RColorBrewer, pheatmap, caret,
randomForest, rfUtilities, optimx, ggpubr, FactoMineR, factoextra,
leaflet, kableExtra, broom, magrittr, data.table, sf, rnaturalearth,
leaflet, tmap
)
# Convert dataset to spatial object
df_sf <- st_as_sf(rodent_data, coords = c("Longitude", "Latitude"), crs = 4326)
# Generate interactive map
leaflet(df_sf) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~Morphology_species,
color = ~factor(Morphology_species),
radius = 3, opacity = 0.8) %>%
addLegend("bottomright", pal = colorFactor(topo.colors(10), rodent_data$Morphology_species),
values = ~Morphology_species, title = "Species")
glimpse(rodent_data)
rodent_data <- rodent_data %>%
mutate(Longitude = as.numeric(Longitude),
Latitude = as.numeric(Latitude))
# Convert dataset to spatial object
df_sf <- st_as_sf(rodent_data, coords = c("Longitude", "Latitude"), crs = 4326)
# Generate interactive map
leaflet(df_sf) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~Morphology_species,
color = ~factor(Morphology_species),
radius = 3, opacity = 0.8) %>%
addLegend("bottomright", pal = colorFactor(topo.colors(10), rodent_data$Morphology_species),
values = ~Morphology_species, title = "Species")
# read rodent data
rodent_data <- read.csv("Data/processed/cleaned_rodent_data.csv")
rodent_data <- rodent_data %>%
mutate(Longitude = as.numeric(Longitude),
Latitude = as.numeric(Latitude))
df_sf <- rodent_data %>%
select(Sample_ID, Morphology_species, Longitude, Latitude) %>%  # Keep only relevant columns
filter(!is.na(Longitude) & !is.na(Latitude)) %>%  # Remove rows with missing coordinates
st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326)  # Convert to spatial object
leaflet(df_sf) %>%
addTiles() %>%
addCircleMarkers(lng = ~st_coordinates(.)[, 1], lat = ~st_coordinates(.)[, 2],
popup = ~Morphology_species,
color = "blue",
radius = 3, opacity = 0.8) %>%
addLegend("bottomright", pal = colorFactor(topo.colors(10), df_sf$Morphology_species),
values = df_sf$Morphology_species, title = "Species Distribution")
# read rodent data
rodent_data <- read.csv("Data/processed/cleaned_rodent_data.csv")
# read rodent data
rodent_data <- read.csv("Data/processed/cleaned_rodent_data.csv")
# convert the df into a spatial df
df_sf <- st_as_sf(df, coords = c("Longitude", "Latitude"), crs = 4326)
unique_species <- unique(df_sf$Morphology_species)
color_scheme <- brewer.pal(length(unique_species), "Set1")
names(color_scheme) <- unique_species
# location: Okambara Elephan Lodge
img1 <- ggdraw() + draw_image("Figures/Maps/2.Elephant_lodge_location_species.png")
img2 <- ggdraw() + draw_image("Figures/Maps/5.Elephant_lodge_location_type.png")
pacman::p_load(
tidyverse, janitor, readr, lubridate, ggplot2, phyloseq, vegan,
corrplot, patchwork, ggrepel, RColorBrewer, pheatmap, caret,
randomForest, rfUtilities, optimx, ggpubr, FactoMineR, factoextra,
leaflet, kableExtra, broom, magrittr, data.table, sf, rnaturalearth,
RColorBrewer, tmap, mapview, cowplot, magick
)
# read rodent data
rodent_data <- read.csv("Data/processed/cleaned_rodent_data.csv")
# convert the df into a spatial df
df_sf <- st_as_sf(df, coords = c("Longitude", "Latitude"), crs = 4326)
unique_species <- unique(df_sf$Morphology_species)
# read rodent data
rodent_data <- read.csv("Data/processed/cleaned_rodent_data.csv")
# convert the df into a spatial df
df_sf <- st_as_sf(df, coords = c("Longitude", "Latitude"), crs = 4326)
View(rodent_data)
glimpse(rodent_data)
str(rodent_data)
# Use leaflet for mapping
leaflet(rodent_data) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~Morphology_species,
color = ~factor(Morphology_species),
radius = 3, opacity = 0.8) %>%
addLegend("bottomright", pal = colorFactor(topo.colors(10), rodent_data$Morphology_species),
values = ~Morphology_species, title = "Species")
# convert the df into a spatial df
df <- st_as_sf(rodent_data, coords = c("Longitude", "Latitude"), crs = 4326)
# convert the df into a spatial df
df_sf <- st_as_sf(rodent_data, coords = c("Longitude", "Latitude"), crs = 4326)
unique_species <- unique(df_sf$Morphology_species)
color_scheme <- brewer.pal(length(unique_species), "Set1")
names(color_scheme) <- unique_species
# location: Okambara Elephan Lodge
img1 <- ggdraw() + draw_image("Figures/Maps/2.Elephant_lodge_location_species.png")
# location: Okambara Elephan Lodge
img1 <- ggdraw() + draw_image("Figures/Maps/2.Elephant_lodge_location_species.png")
img2 <- ggdraw() + draw_image("Figures/Maps/5.Elephant_lodge_location_type.png")
combined_plot <- plot_grid(
img1, NULL, img2,         # The NULL creates an empty column for spacing
labels = c("A. Rodent species", "", "B. Location of rodents"), # Labels for each panel. The empty label ("") corresponds to the NULL/spacing column.
label_size = 14,          # Adjust size as needed
ncol = 3,                 # Increase to 3 because of the added NULL/spacing column
rel_widths = c(1, 0.1, 1), # Relative widths of the columns. Adjust the 0.1 to increase/decrease spacing.
label_y = 0.8       # Adjust this value to move the label closer to the plot
)
leaflet(df_sf) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~Morphology_species,
color = ~factor(Morphology_species),
radius = 3, opacity = 0.8) %>%
addLegend("bottomright", pal = colorFactor(topo.colors(10), df_sf$Morphology_species),
values = ~Morphology_species, title = "Species")
View(df_sf)
# read rodent data
rodent_data <- read.csv("Data/processed/cleaned_rodent_data.csv")
# Use leaflet for mapping
leaflet(rodent_data) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~Morphology_species,
color = ~factor(Morphology_species),
radius = 3, opacity = 0.8) %>%
addLegend("bottomright", pal = colorFactor(topo.colors(10), rodent_data$Morphology_species),
values = ~Morphology_species, title = "Species")
# ***********************************************************
# Title: Species Geographical Distribution
# Purpose: Maps species locations using Leaflet
# Input: "data/processed/cleaned_rodent_data.csv"
# Output: Interactive Map (Leaflet)
# ***********************************************************
rodent_data <- read.csv("Data/processed/cleaned_rodent_data.csv")
# Ensure Longitude and Latitude are numeric
rodent_data <- rodent_data %>%
mutate(Longitude = as.numeric(Longitude),
Latitude = as.numeric(Latitude)) %>%
filter(!is.na(Longitude) & !is.na(Latitude))  # Remove missing coordinates
# Convert to spatial format
df_sf <- st_as_sf(rodent_data, coords = c("Longitude", "Latitude"), crs = 4326)
# Generate interactive map
m <- leaflet(df_sf) %>%
addTiles() %>%
addCircleMarkers(lng = ~st_coordinates(.)[,1], lat = ~st_coordinates(.)[,2],
popup = ~Morphology_species,
color = "blue",
radius = 3, opacity = 0.8) %>%
addLegend("bottomright", pal = colorFactor(topo.colors(10), df_sf$Morphology_species),
values = df_sf$Morphology_species, title = "Species")
message("âœ… Geographical mapping completed!")
class(df_sf)
df_sf <- st_as_sf(df_sf, coords = c("Longitude", "Latitude"), crs = 4326)
leaflet(df_sf) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~Morphology_species,
color = ~factor(Morphology_species),
radius = 3, opacity = 0.8) %>%
addLegend("bottomright", pal = colorFactor(topo.colors(10), df_sf$Morphology_species),
values = ~Morphology_species, title = "Species")
# Load required libraries
library(dplyr)
library(readr)
library(leaflet)
library(sf)
library(RColorBrewer)
# Read processed rodent data
rodent_data <- read_csv("data/processed/cleaned_rodent_data.csv")
# Ensure Longitude and Latitude are numeric
rodent_data <- rodent_data %>%
mutate(Longitude = as.numeric(Longitude),
Latitude = as.numeric(Latitude)) %>%
filter(!is.na(Longitude) & !is.na(Latitude))  # Remove missing coordinates
df_sf <- st_as_sf(rodent_data, coords = c("Longitude", "Latitude"), crs = 4326)
# Extract Longitude & Latitude back into separate columns for Leaflet compatibility
df_sf <- df_sf %>%
mutate(Longitude = st_coordinates(.)[, 1],
Latitude = st_coordinates(.)[, 2])
m <- leaflet(df_sf) %>%
addTiles() %>%
addCircleMarkers(lng = ~Longitude, lat = ~Latitude, popup = ~Morphology_species,
color = "blue", radius = 3, opacity = 0.8) %>%
addLegend("bottomright", pal = colorFactor(topo.colors(10), df_sf$Morphology_species),
values = df_sf$Morphology_species, title = "Species")
message("âœ… Geographical mapping completed!")
m  # Display the map
# Read processed rodent data
rodent_data <- read_csv("data/processed/cleaned_rodent_data.csv")
# Ensure Longitude and Latitude are numeric
rodent_data <- rodent_data %>%
mutate(Longitude = as.numeric(Longitude),
Latitude = as.numeric(Latitude)) %>%
filter(!is.na(Longitude) & !is.na(Latitude))  # Remove missing coordinates
df_sf <- st_as_sf(rodent_data, coords = c("Longitude", "Latitude"), crs = 4326)
# Extract Longitude & Latitude back into separate columns for Leaflet compatibility
df_sf <- df_sf %>%
mutate(Longitude = st_coordinates(.)[, 1],
Latitude = st_coordinates(.)[, 2])
m <- leaflet(df_sf) %>%
addTiles() %>%
addCircleMarkers(lng = ~Longitude, lat = ~Latitude, popup = ~Morphology_species,
color = "blue", radius = 3, opacity = 0.8) %>%
addLegend("bottomright", pal = colorFactor(topo.colors(10), df_sf$Morphology_species),
values = df_sf$Morphology_species, title = "Species")
message("âœ… Geographical mapping completed!")
m  # Display the map
library(dplyr)
# Load cleaned dataset
rodent_data <- read_csv("data/processed/cleaned_rodent_data.csv")
# Group by species, sex, and age
sex_age_distribution <- rodent_data %>%
group_by(Morphology_species, Sex, Age) %>%
summarize(count = n()) %>%
ungroup()
# Generate bar plot
p <- ggplot(sex_age_distribution, aes(x = Morphology_species, y = count, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Sex Distribution by Species", x = "Species", y = "Count") +
theme_minimal
p
# Load cleaned dataset
rodent_data <- read_csv("data/processed/cleaned_rodent_data.csv")
# Group by species, sex, and age
sex_age_distribution <- rodent_data %>%
group_by(Morphology_species, Sex, Age) %>%
summarize(count = n()) %>%
ungroup()
# Generate bar plot
p <- ggplot(sex_age_distribution, aes(x = Morphology_species, y = count, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Sex Distribution by Species", x = "Species", y = "Count") +
theme_minimal
# Generate bar plot
p <- ggplot(sex_age_distribution, aes(x = Morphology_species, y = count, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Sex Distribution by Species", x = "Species", y = "Count") +
theme_minimal()
p
# ***********************************************************
# Title: Sex & Age Distribution
# Purpose: Analyzes and visualizes sex & age distribution
# Input: "data/processed/cleaned_rodent_data.csv"
# Output: "results/figures/sex_age_distribution.png"
# ***********************************************************
# Load cleaned dataset
rodent_data <- read_csv("data/processed/cleaned_rodent_data.csv")
# Group by species, sex, and age
sex_age_distribution <- rodent_data %>%
group_by(Morphology_species, Sex, Age) %>%
summarize(count = n()) %>%
ungroup()
# Generate bar plot
p <- ggplot(sex_age_distribution, aes(x = Morphology_species, y = count, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Sex Distribution by Species", x = "Species", y = "Count") +
theme_minimal()
p
ggsave("results/figures/sex_age_distribution.png", p, width = 10, height = 7, dpi = 300)
source("~/GitHub/Namibia_project/Scripts/Master_script.R", echo=TRUE)
source("~/GitHub/Namibia_project/Scripts/Visualization/05_sex_age_analysis.R", echo=TRUE)
# ***********************************************************
# Part 5: Generate Figures & Reports ----
# ***********************************************************
#----------------------------------------------------------*
# 5.1: Generate Species Distribution Plots
#----------------------------------------------------------*
message("\nðŸ”¹ Step 5.1: Generating species distribution plots...")
source(file.path(scripts_dir, "visualization", "05_species_distribution.R"))
#----------------------------------------------------------*
# 5.2: Generate Geographical Mapping
#----------------------------------------------------------*
message("\nðŸ”¹ Step 5.2: Mapping species distributions...")
source(file.path(scripts_dir, "visualization", "05_geographical_mapping.R"))
#----------------------------------------------------------*
# 5.3: Analyze Sex & Age Distribution
#----------------------------------------------------------*
message("\nðŸ”¹ Step 5.3: Analyzing sex & age distribution...")
source(file.path(scripts_dir, "visualization", "05_sex_age_analysis.R"))
# Group by species and habitat
habitat_distribution <- rodent_data %>%
group_by(Morphology_species, Location_type) %>%
summarize(count = n()) %>%
ungroup()
# Plot habitat distribution
ggplot(habitat_distribution, aes(x = Location_type, y = count, fill = Morphology_species)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Species Distribution by Habitat Type", x = "Habitat Type", y = "Count") +
theme_minimal()
# Save the plot
ggsave("results/figures/habitat_distribution.png", width = 10, height = 7, dpi = 300)
rodent_data <- read_csv("data/processed/cleaned_rodent_data.csv")
habitat_distribution <- rodent_data %>%
group_by(Morphology_species, Location_type) %>%
summarize(count = n(), .groups = "drop")
p <- ggplot(habitat_distribution, aes(x = Location_type, y = count, fill = Morphology_species)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Species Distribution by Habitat Type", x = "Habitat Type", y = "Count") +
theme_minimal()
ggsave("results/figures/habitat_distribution.png", p, width = 10, height = 7, dpi = 300)
message("âœ… Habitat distribution analysis saved!")
source(file.path(scripts_dir, "visualization", "05_sex_age_analysis.R")
# ----------------------------------------------------------*
# 5.4: Habitat Distribution Analysis
# ----------------------------------------------------------*
message("\nðŸ”¹ Step 5.4: Analyzing species distribution by habitat...")
source(file.path(scripts_dir, "visualization", "05_sex_age_analysis.R"))
# ----------------------------------------------------------*
# 5.4: Habitat Distribution Analysis
# ----------------------------------------------------------*
message("\nðŸ”¹ Step 5.4: Analyzing species distribution by habitat...")
source(file.path(scripts_dir, "visualization", "05_habitat_distribution.R"))
# Load cleaned dataset
rodent_data <- read_csv("data/processed/cleaned_rodent_data.csv")
# Convert Date to date format
rodent_data$Date <- dmy(rodent_data$Date)
# Generate histogram of species occurrences over time
p <- ggplot(rodent_data, aes(x = Date, fill = Morphology_species)) +
geom_histogram(binwidth = 1) +
labs(title = "Sampling Counts by Date", x = "Date", y = "Count") +
theme_minimal()
# Save plot
ggsave("results/figures/temporal_patterns.png", p, width = 10, height = 7, dpi = 300)
message("âœ… Temporal patterns analysis saved!")
p
# Load cleaned dataset
rodent_data <- read_csv("data/processed/cleaned_rodent_data.csv")
# Remove NA weights for visualization
rodent_data_clean <- rodent_data %>% drop_na(Weight_g)
# Generate violin plot for weight distribution
p <- ggplot(rodent_data_clean, aes(x = Morphology_species, y = Weight_g, fill = Morphology_species)) +
geom_violin() +
labs(title = "Weight Distribution by Species", x = "Species", y = "Weight (g)") +
theme_minimal()
# Save plot
ggsave("results/figures/weight_distribution.png", p, width = 10, height = 7, dpi = 300)
message("âœ… Weight distribution analysis saved!")
p
# ***********************************************************
# Title: Variable Relationships (Geographical Scatter Plot)
# Purpose: Analyzes relationships between species and geographical location
# Input: "data/processed/cleaned_rodent_data.csv"
# Output: "results/figures/species_scatter_plot.png"
# ***********************************************************
# Load cleaned dataset
rodent_data <- read_csv("data/processed/cleaned_rodent_data.csv")
# Generate scatter plot of species distribution across longitude & latitude
p <- ggplot(rodent_data, aes(x = Longitude, y = Latitude, color = Morphology_species)) +
geom_point() +
labs(title = "Species Distribution by Geographic Location", x = "Longitude", y = "Latitude") +
theme_minimal()
# Save plot
ggsave("results/figures/species_scatter_plot.png", p, width = 10, height = 7, dpi = 300)
message("âœ… Variable relationships (scatter plot) saved!")
p
# ***********************************************************
# Part 5: Generate Figures & Reports ----
# ***********************************************************
#----------------------------------------------------------*
# 5.1: Generate Species Distribution Plots
#----------------------------------------------------------*
message("\nðŸ”¹ Step 5.1: Generating species distribution plots...")
source(file.path(scripts_dir, "visualization", "05_species_distribution.R"))
#----------------------------------------------------------*
# 5.2: Generate Geographical Mapping
#----------------------------------------------------------*
message("\nðŸ”¹ Step 5.2: Mapping species distributions...")
source(file.path(scripts_dir, "visualization", "05_geographical_mapping.R"))
#----------------------------------------------------------*
# 5.3: Analyze Sex & Age Distribution
#----------------------------------------------------------*
message("\nðŸ”¹ Step 5.3: Analyzing sex & age distribution...")
source(file.path(scripts_dir, "visualization", "05_sex_age_analysis.R"))
# ----------------------------------------------------------*
# 5.4: Habitat Distribution Analysis
# ----------------------------------------------------------*
message("\nðŸ”¹ Step 5.4: Analyzing species distribution by habitat...")
source(file.path(scripts_dir, "visualization", "05_habitat_distribution.R"))
# ----------------------------------------------------------*
# 5.5: Temporal Patterns Analysis
# ----------------------------------------------------------*
message("\nðŸ”¹ Step 5.5: Analyzing temporal patterns of species occurrences...")
source(file.path(scripts_dir, "visualization", "05_temporal_patterns.R"))
# ----------------------------------------------------------*
# 5.6: Weight Distribution Analysis
# ----------------------------------------------------------*
message("\nðŸ”¹ Step 5.6: Analyzing weight distribution across species...")
source(file.path(scripts_dir, "visualization", "05_weight_distribution.R"))
# ----------------------------------------------------------*
# 5.7: Variable Relationships (Geographical Scatter Plot)
# ----------------------------------------------------------*
message("\nðŸ”¹ Step 5.7: Analyzing relationships between species and geographical coordinates...")
source(file.path(scripts_dir, "visualization", "05_variable_relationships.R"))
