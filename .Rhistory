habitat_distribution <- rodent_data %>%
group_by(Morphology_species, Location_type) %>%
summarize(count = n(), .groups = "drop")
p <- ggplot(habitat_distribution, aes(x = Location_type, y = count, fill = Morphology_species)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Species Distribution by Habitat Type", x = "Habitat Type", y = "Count") +
theme_minimal()
ggsave("results/figures/habitat_distribution.png", p, width = 10, height = 7, dpi = 300)
message("âœ… Habitat distribution analysis saved!")
source(file.path(scripts_dir, "visualization", "05_sex_age_analysis.R")
# ----------------------------------------------------------*
# 5.4: Habitat Distribution Analysis
# ----------------------------------------------------------*
message("\nðŸ”¹ Step 5.4: Analyzing species distribution by habitat...")
source(file.path(scripts_dir, "visualization", "05_sex_age_analysis.R"))
# ----------------------------------------------------------*
# 5.4: Habitat Distribution Analysis
# ----------------------------------------------------------*
message("\nðŸ”¹ Step 5.4: Analyzing species distribution by habitat...")
source(file.path(scripts_dir, "visualization", "05_habitat_distribution.R"))
# Load cleaned dataset
rodent_data <- read_csv("data/processed/cleaned_rodent_data.csv")
# Convert Date to date format
rodent_data$Date <- dmy(rodent_data$Date)
# Generate histogram of species occurrences over time
p <- ggplot(rodent_data, aes(x = Date, fill = Morphology_species)) +
geom_histogram(binwidth = 1) +
labs(title = "Sampling Counts by Date", x = "Date", y = "Count") +
theme_minimal()
# Save plot
ggsave("results/figures/temporal_patterns.png", p, width = 10, height = 7, dpi = 300)
message("âœ… Temporal patterns analysis saved!")
p
# Load cleaned dataset
rodent_data <- read_csv("data/processed/cleaned_rodent_data.csv")
# Remove NA weights for visualization
rodent_data_clean <- rodent_data %>% drop_na(Weight_g)
# Generate violin plot for weight distribution
p <- ggplot(rodent_data_clean, aes(x = Morphology_species, y = Weight_g, fill = Morphology_species)) +
geom_violin() +
labs(title = "Weight Distribution by Species", x = "Species", y = "Weight (g)") +
theme_minimal()
# Save plot
ggsave("results/figures/weight_distribution.png", p, width = 10, height = 7, dpi = 300)
message("âœ… Weight distribution analysis saved!")
p
# ***********************************************************
# Title: Variable Relationships (Geographical Scatter Plot)
# Purpose: Analyzes relationships between species and geographical location
# Input: "data/processed/cleaned_rodent_data.csv"
# Output: "results/figures/species_scatter_plot.png"
# ***********************************************************
# Load cleaned dataset
rodent_data <- read_csv("data/processed/cleaned_rodent_data.csv")
# Generate scatter plot of species distribution across longitude & latitude
p <- ggplot(rodent_data, aes(x = Longitude, y = Latitude, color = Morphology_species)) +
geom_point() +
labs(title = "Species Distribution by Geographic Location", x = "Longitude", y = "Latitude") +
theme_minimal()
# Save plot
ggsave("results/figures/species_scatter_plot.png", p, width = 10, height = 7, dpi = 300)
message("âœ… Variable relationships (scatter plot) saved!")
p
# ***********************************************************
# Part 5: Generate Figures & Reports ----
# ***********************************************************
#----------------------------------------------------------*
# 5.1: Generate Species Distribution Plots
#----------------------------------------------------------*
message("\nðŸ”¹ Step 5.1: Generating species distribution plots...")
source(file.path(scripts_dir, "visualization", "05_species_distribution.R"))
#----------------------------------------------------------*
# 5.2: Generate Geographical Mapping
#----------------------------------------------------------*
message("\nðŸ”¹ Step 5.2: Mapping species distributions...")
source(file.path(scripts_dir, "visualization", "05_geographical_mapping.R"))
#----------------------------------------------------------*
# 5.3: Analyze Sex & Age Distribution
#----------------------------------------------------------*
message("\nðŸ”¹ Step 5.3: Analyzing sex & age distribution...")
source(file.path(scripts_dir, "visualization", "05_sex_age_analysis.R"))
# ----------------------------------------------------------*
# 5.4: Habitat Distribution Analysis
# ----------------------------------------------------------*
message("\nðŸ”¹ Step 5.4: Analyzing species distribution by habitat...")
source(file.path(scripts_dir, "visualization", "05_habitat_distribution.R"))
# ----------------------------------------------------------*
# 5.5: Temporal Patterns Analysis
# ----------------------------------------------------------*
message("\nðŸ”¹ Step 5.5: Analyzing temporal patterns of species occurrences...")
source(file.path(scripts_dir, "visualization", "05_temporal_patterns.R"))
# ----------------------------------------------------------*
# 5.6: Weight Distribution Analysis
# ----------------------------------------------------------*
message("\nðŸ”¹ Step 5.6: Analyzing weight distribution across species...")
source(file.path(scripts_dir, "visualization", "05_weight_distribution.R"))
# ----------------------------------------------------------*
# 5.7: Variable Relationships (Geographical Scatter Plot)
# ----------------------------------------------------------*
message("\nðŸ”¹ Step 5.7: Analyzing relationships between species and geographical coordinates...")
source(file.path(scripts_dir, "visualization", "05_variable_relationships.R"))
# Increase max overlaps for better plotting
options(ggrepel.max.overlaps = Inf)
# Set a reproducible seed
set.seed(13102023)
# Load & install required packages using pacman
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(
tidyverse, janitor, readr, lubridate, ggplot2, phyloseq, vegan,
corrplot, patchwork, ggrepel, RColorBrewer, pheatmap, caret,
randomForest, rfUtilities, optimx, ggpubr, FactoMineR, factoextra,
leaflet, kableExtra, broom, magrittr, data.table, sf, rnaturalearth,
RColorBrewer, tmap, mapview, cowplot, magick
)
# Dynamically detect the working directory
project_root <- here::here()
# Define primary directories
data_dir       <- file.path(project_root, "data")
raw_data       <- file.path(data_dir, "raw")
field_raw_tracking <- file.path(raw_data, "Field_tracking_data")
processed_data <- file.path(data_dir, "processed")
metadata_dir   <- file.path(data_dir, "metadata")
results_dir    <- file.path(project_root, "results")
figures_dir    <- file.path(results_dir, "figures")
tables_dir     <- file.path(results_dir, "tables")
scripts_dir    <- file.path(project_root, "scripts")
#----------------------------------------------------------*
# 3.1: Import & Clean Rodent Field Data
#----------------------------------------------------------*
message("\nðŸ”¹ Step 3.1: Cleaning rodent field data...")
source(file.path(scripts_dir, "preprocessing", "import_clean_field_data.R"))
#----------------------------------------------------------*
# 3.2: Process Nanodrop & Sample Metadata
#----------------------------------------------------------*
message("\nðŸ”¹ Step 3.2: Processing sample metadata...")
source(file.path(scripts_dir, "preprocessing", "02_process_metadata.R"))
df <- read.csv("Data/Field_tracking_data/Rodents_catching_data.csv")
# convert the df into a spatial df
df_sf <- st_as_sf(df, coords = c("Longitude", "Latitude"), crs = 4326)
unique_species <- unique(df_sf$Morphology_species)
color_scheme <- brewer.pal(length(unique_species), "Set1")
names(color_scheme) <- unique_species
# map on species and geolocations
mapview(df_sf,
zcol = "Morphology_species",
col.regions = color_scheme,
map.types = "OpenStreetMap",
popup = "Sample_ID",
legend = TRUE)
# map on location and structure where the rodent was caught
tm_basemap("OpenStreetMap") +
tm_shape(df_sf) +
tm_dots(col = "Location_type",
title = "Species",
palette = "Set1",
size = 0.5,
border.col = "white",
id = "Sample_ID")
df <- read.csv("Data/Field_tracking_data/Rodents_catching_data.csv")
df <- read.csv("Data/processed/cleaned_rodent_data.csv")
# convert the df into a spatial df
df_sf <- st_as_sf(df, coords = c("Longitude", "Latitude"), crs = 4326)
unique_species <- unique(df_sf$Morphology_species)
color_scheme <- brewer.pal(length(unique_species), "Set1")
names(color_scheme) <- unique_species
# map on species and geolocations
mapview(df_sf,
zcol = "Morphology_species",
col.regions = color_scheme,
map.types = "OpenStreetMap",
popup = "Sample_ID",
legend = TRUE)
# map on location and structure where the rodent was caught
tm_basemap("OpenStreetMap") +
tm_shape(df_sf) +
tm_dots(col = "Location_type",
title = "Species",
palette = "Set1",
size = 0.5,
border.col = "white",
id = "Sample_ID")
# location: Okambara Elephan Lodge
img1 <- ggdraw() + draw_image("Figures/Maps/2.Elephant_lodge_location_species.png")
img2 <- ggdraw() + draw_image("Figures/Maps/5.Elephant_lodge_location_type.png")
combined_plot <- plot_grid(
img1, NULL, img2,         # The NULL creates an empty column for spacing
labels = c("A. Rodent species", "", "B. Location of rodents"), # Labels for each panel. The empty label ("") corresponds to the NULL/spacing column.
label_size = 14,          # Adjust size as needed
ncol = 3,                 # Increase to 3 because of the added NULL/spacing column
rel_widths = c(1, 0.1, 1), # Relative widths of the columns. Adjust the 0.1 to increase/decrease spacing.
label_y = 0.8       # Adjust this value to move the label closer to the plot
)
print(combined_plot)
ggsave("Figures/Maps/Lodge_location.png", combined_plot, width = 10, height = 7, dpi = 300)
# Location: Bildah
img1 <- ggdraw() + draw_image("Figures/Maps/3.Bildah_species.png")
img2 <- ggdraw() + draw_image("Figures/Maps/4.Bildah_type.png")
combined_plot <- plot_grid(
img1, NULL, img2,         # The NULL creates an empty column for spacing
labels = c("C. Rodent species", "", "D. Location of rodents"), # Labels for each panel. The empty label ("") corresponds to the NULL/spacing column.
label_size = 14,          # Adjust size as needed
ncol = 3,                 # Increase to 3 because of the added NULL/spacing column
rel_widths = c(1, 0.1, 1), # Relative widths of the columns. Adjust the 0.1 to increase/decrease spacing.
label_y = 0.8)
print(combined_plot)
library(ggplot2)
library(cowplot)
# Okambara
img1 <- ggdraw() + draw_image("results/figures/maps/2.Elephant_lodge_location_species.png")
img2 <- ggdraw() + draw_image("results/figures/maps/5.Elephant_lodge_location_type.png")
combined_plot <- plot_grid(
img1, NULL, img2,
labels = c("A. Rodent species", "", "B. Location of rodents"),
label_size = 14, ncol = 3, rel_widths = c(1, 0.1, 1), label_y = 0.8
)
ggsave("results/figures/maps/Lodge_location.png", combined_plot, width = 10, height = 7, dpi = 300)
# Bildah
img1 <- ggdraw() + draw_image("results/figures/maps/3.Bildah_species.png")
img2 <- ggdraw() + draw_image("results/figures/maps/4.Bildah_type.png")
combined_plot <- plot_grid(img1, NULL, img2,
labels = c("C. Rodent species", "", "D. Location of rodents"),
label_size = 14, ncol = 3, rel_widths = c(1, 0.1, 1), label_y = 0.8
)
ggsave("results/figures/maps/Bildah_locations.png", combined_plot, width = 10, height = 7, dpi = 300)
# Cheetah Station
img1 <- ggdraw() + draw_image("results/figures/maps/3.Cheetah_research_station.png")
img2 <- ggdraw() + draw_image("results/figures/maps/6.Cheetah_research_station_type.png")
combined_plot <- plot_grid(img1, NULL, img2,
labels = c("E. Rodent species", "", "F. Location of rodents"),
label_size = 14, ncol = 3, rel_widths = c(1, 0.1, 1), label_y = 0.8
)
ggsave("results/figures/maps/Cheetah_location.png", combined_plot, width = 10, height = 7, dpi = 300)
message("âœ… Site panel figures saved!")
# Load cleaned dataset
rodent_data <- read_csv("data/processed/cleaned_rodent_data.csv")
# Remove NA weights for visualization
rodent_data_clean <- rodent_data %>% drop_na(Weight_g)
# Generate violin plot for weight distribution
p <- ggplot(rodent_data_clean, aes(x = Morphology_species, y = Weight_g, fill = Morphology_species)) +
geom_violin() +
labs(title = "Weight Distribution by Species", x = "Species", y = "Weight (g)") +
theme_minimal()
p
# Save plot
ggsave("results/figures/weight_distribution.png", p, width = 10, height = 7,
dpi = 300)
# Average weight bar plot
figure_df <- rodent_data %>%
group_by(Morphology_species) %>%
summarise(mean_weight = mean(Weight_g, na.rm = TRUE)) %>%
arrange(-mean_weight)
figure_df$Morphology_species <- factor(figure_df$Morphology_species, levels = figure_df$Morphology_species)
p <- ggplot(figure_df, aes(x = Morphology_species, y = mean_weight)) +
geom_bar(stat = "identity", fill = "orchid1") +
labs(title = "Average Weight per Species", x = "Species", y = "Average Weight (g)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("results/figures/average_weight_per_species.png", p, width = 10, height = 7, dpi = 300)
p
ggsave("results/figures/average_weight_per_species.png", p, width = 10, height = 7, dpi = 300)
message("âœ… Average weight plot saved!")
message("âœ… Weight distribution analysis saved!")
# Sex pie chart
sex_counts <- rodent_data %>%
filter(!is.na(Sex)) %>%
group_by(Sex) %>%
summarise(count = n())
p_pie <- ggplot(sex_counts, aes(x = "", y = count, fill = Sex)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
labs(title = "Distribution of Mice by Sex", fill = "Sex") +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p_pie
ggsave("results/figures/sex_distribution_pie_chart.png", p_pie, width = 7, height = 7, dpi = 300)
message("âœ… Sex pie chart saved!")
# ----------------------------------------------------------*
# 5.8: Site Panel Figures (Map Combos)
# ----------------------------------------------------------*
message("\nðŸ”¹ Step 5.8: Creating panel plots for site locations...")
source(file.path(scripts_dir, "visualization", "05_site_panels.R"))
#----------------------------------------------------------*
# 3.1a: Nanodrop DNA Quality Assessment in the Field
#----------------------------------------------------------*
message("\nðŸ”¹ Step 3.1a: Archiving early Nanodrop DNA QC (field)...")
# Create output directory for QC plots if it doesn't exist
dir.create("results/figures/archived_qc", recursive = TRUE, showWarnings = FALSE)
# ***********************************************************
# Step 1: Read and Merge Nanodrop Files
# ***********************************************************
rodent1 <- read_tsv("data/raw/Nanodrop_measurements/Rodents_26032023.tsv")
rodent2 <- read_tsv("data/raw/Nanodrop_measurements/Rodents_27032023.tsv")
# Remove first column (ID column from Nanodrop export)
rodent1 <- rodent1[, -1]
rodent2 <- rodent2[, -1]
# Combine
nanodrop_field <- bind_rows(rodent1, rodent2)
View(nanodrop_field)
# Save merged file
write_csv(nanodrop_field, "data/processed/Nanodrop_rodents_202303_combined.csv")
message("âœ… Saved merged Nanodrop field data to: data/processed/Nanodrop_rodents_202303_combined.csv")
# ***********************************************************
# Step 2: Tidy Column Names (Optional but recommended)
# ***********************************************************
colnames(nanodrop_field) <- gsub(" ", "_", colnames(nanodrop_field))
# Rename columns for clarity if needed
nanodrop_field <- nanodrop_field %>%
rename(
Quality_260_280 = `260/280`,
Quality_260_230 = `260/230`,
DNA_ng_ul = `Nucleic_Acid`
)
# ***********************************************************
# Step 3: Plot 260/280 Ratio vs DNA Concentration
# ***********************************************************
p1 <- ggplot(nanodrop_field, aes(x = DNA_ng_ul, y = Quality_260_280)) +
geom_jitter() +
labs(x = "DNA Concentration (ng/Âµl)", y = "260/280 Ratio",
title = "Nanodrop: 260/280 Ratio vs DNA Concentration")
ggsave("results/figures/archived_qc/260_280_vs_concentration.png", p1, width = 8, height = 6, dpi = 300)
p1
# Filter outliers (extreme 260/280)
p2 <- nanodrop_field %>%
filter(Quality_260_280 < 2.5, Quality_260_280 > 1.5) %>%
ggplot(aes(x = DNA_ng_ul, y = Quality_260_280)) +
geom_jitter() +
labs(x = "DNA Concentration (ng/Âµl)", y = "260/280 Ratio",
title = "Filtered: 260/280 Ratio (1.5 - 2.5)")
ggsave("results/figures/archived_qc/260_280_filtered.png", p2, width = 8, height = 6, dpi = 300)
p2# ***********************************************************
# ***********************************************************
# Step 4: Plot 260/230 Ratios
# ***********************************************************
p3 <- ggplot(nanodrop_field, aes(x = DNA_ng_ul, y = Quality_260_230)) +
geom_jitter() +
labs(x = "DNA Concentration (ng/Âµl)", y = "260/230 Ratio",
title = "Nanodrop: 260/230 Ratio vs DNA Concentration")
ggsave("results/figures/archived_qc/260_230_vs_concentration.png", p3, width = 8, height = 6, dpi = 300)
p3
# Filter high 260/230 values
p4 <- nanodrop_field %>%
filter(Quality_260_230 < 60) %>%
ggplot(aes(x = DNA_ng_ul, y = Quality_260_230)) +
geom_jitter() +
labs(x = "DNA Concentration (ng/Âµl)", y = "260/230 Ratio",
title = "Filtered: 260/230 Ratio (<60)")
ggsave("results/figures/archived_qc/260_230_filtered.png", p4, width = 8, height = 6, dpi = 300)
p4
# Focus on ideal 260/230 range
p5 <- nanodrop_field %>%
filter(Quality_260_230 < 2.5, Quality_260_230 > 1.8) %>%
ggplot(aes(x = DNA_ng_ul, y = Quality_260_230)) +
geom_jitter() +
labs(x = "DNA Concentration (ng/Âµl)", y = "260/230 Ratio",
title = "Filtered: 260/230 Ratio (1.8 - 2.5)")
ggsave("results/figures/archived_qc/260_230_ideal_range.png", p5, width = 8, height = 6, dpi = 300)
p5
# ***********************************************************
# Step 5: Filter Golden Ratio Samples
# ***********************************************************
golden <- nanodrop_field %>%
filter(Quality_260_280 < 2.5, Quality_260_280 > 1.5)
write_csv(golden, "data/processed/Nanodrop_rodents_202303_golden_ratio.csv")
message("âœ… Filtered golden ratio samples saved to: data/processed/Nanodrop_rodents_202303_golden_ratio.csv")
source(file.path(scripts_dir, "preprocessing", "01a_nanodrop_field_qc.R"))
# Increase max overlaps for better plotting
options(ggrepel.max.overlaps = Inf)
# Set a reproducible seed
set.seed(13102023)
# Load & install required packages using pacman
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(
tidyverse, janitor, readr, lubridate, ggplot2, phyloseq, vegan,
corrplot, patchwork, ggrepel, RColorBrewer, pheatmap, caret,
randomForest, rfUtilities, optimx, ggpubr, FactoMineR, factoextra,
leaflet, kableExtra, broom, magrittr, data.table, sf, rnaturalearth,
RColorBrewer, tmap, mapview, cowplot, magick
)
# Dynamically detect the working directory
project_root <- here::here()
# Define primary directories
data_dir       <- file.path(project_root, "data")
raw_data       <- file.path(data_dir, "raw")
field_raw_tracking <- file.path(raw_data, "Field_tracking_data")
processed_data <- file.path(data_dir, "processed")
metadata_dir   <- file.path(data_dir, "metadata")
results_dir    <- file.path(project_root, "results")
figures_dir    <- file.path(results_dir, "figures")
tables_dir     <- file.path(results_dir, "tables")
scripts_dir    <- file.path(project_root, "scripts")
#----------------------------------------------------------*
# 3.1: Import & Clean Rodent Field Data
#----------------------------------------------------------*
message("\nðŸ”¹ Step 3.1: Cleaning rodent field data...")
source(file.path(scripts_dir, "preprocessing", "1_import_clean_field_data.R"))
# Create directory for results
dir.create("results/figures/dna_cleaning", recursive = TRUE, showWarnings = FALSE)
# Read data
raw <- read_excel("Data/raw/20241125_marly_extra_DNA_cleaning_roedeanst_DNA.xlsx",
sheet = "Plate_set-up DNA Plate16s r", skip = 1)
pacman::p_load(
tidyverse, janitor, readr, lubridate, ggplot2, phyloseq, vegan,
corrplot, patchwork, ggrepel, RColorBrewer, pheatmap, caret,
randomForest, rfUtilities, optimx, ggpubr, FactoMineR, factoextra,
leaflet, kableExtra, broom, magrittr, data.table, sf, rnaturalearth,
RColorBrewer, tmap, mapview, cowplot, magick, readxl
)
# Create directory for results
dir.create("results/figures/dna_cleaning", recursive = TRUE, showWarnings = FALSE)
# Read data
raw <- read_excel("Data/raw/20241125_marly_extra_DNA_cleaning_roedeanst_DNA.xlsx",
sheet = "Plate_set-up DNA Plate16s r", skip = 1)
# Rename relevant columns manually
names(raw)[c(0:3, 10, 11, 17, 18, 19, 20, 21, 22, 23, 24)] <- c(
"Sample_ID", "Well", "Qubit_ng_ul_pre", "Condition",
"Nanodrop_ng_ul_pre", "A260_pre", "Qubit_ng_ul_post",
"Nanodrop_ng_ul_post", "Nanodrop_unit_post", "A260_post",
"A280_post", "Ratio_260_280_post", "Ratio_260_230_post"
)
View(raw)
# Select and tidy
df_cleaning <- raw %>%
select(Sample_ID, Well, Qubit_ng_ul_pre, Nanodrop_ng_ul_pre,
Qubit_ng_ul_post, Nanodrop_ng_ul_post,
A260_post, A280_post, Ratio_260_280_post, Ratio_260_230_post) %>%
filter(!is.na(Sample_ID)) %>%
mutate(across(where(is.character), ~ trimws(.))) %>%
mutate(across(contains("Qubit"), as.numeric)) %>%
mutate(across(starts_with("Ratio"), as.numeric))
View(df_cleaning)
View(df_cleaning)
View(df_cleaning)
View(rodent_data)
# Select and tidy
df_cleaning <- raw %>%
select(Sample_ID, Well, Qubit_ng_ul_pre, Nanodrop_ng_ul_pre,
Qubit_ng_ul_post, Nanodrop_ng_ul_post,
A260_post, A280_post, Ratio_260_280_post, Ratio_260_230_post) %>%
filter(!is.na(Sample_ID)) %>%
mutate(across(where(is.character), ~ trimws(.))) %>%
mutate(across(contains("Qubit"), as.numeric)) %>%
mutate(across(starts_with("Ratio"), as.numeric))
# Create directory for results
dir.create("results/figures/dna_cleaning", recursive = TRUE, showWarnings = FALSE)
# Read data
raw <- read_excel("Data/raw/20241125_marly_extra_DNA_cleaning_roedeanst_DNA.xlsx",
sheet = "Plate_set-up DNA Plate16s r", skip = 1)
# Rename relevant columns manually
names(raw)[c(0:3, 10, 11, 17, 18, 19, 20, 21, 22, 23, 24)] <- c(
"Sample_ID", "Well", "Qubit_ng_ul_pre", "Condition",
"Nanodrop_ng_ul_pre", "A260_pre", "Qubit_ng_ul_post",
"Nanodrop_ng_ul_post", "Nanodrop_unit_post", "A260_post",
"A280_post", "Ratio_260_280_post", "Ratio_260_230_post"
)
# Read data
raw <- read_excel("Data/raw/20241125_marly_extra_DNA_cleaning_roedeanst_DNA.xlsx",
sheet = "Plate_set-up DNA Plate16s r", skip = 1)
# Read data
raw <- read_excel("Data/raw/20241125_marly_extra_DNA_cleaning_roedeanst_DNA.xlsx",
sheet = "Plate_set-up DNA Plate16s r", skip = 1)
# Read data
raw <- read_excel("Data/raw/20241125_marly_extra_DNA_cleaning_roedeanst_DNA.xlsx",
sheet = "Plate_set-up DNA Plate16s r", skip = 1)
# Rename relevant columns manually
names(raw)[c(0:3, 10, 11, 17, 18, 19, 20, 21, 22, 23, 24)] <- c(
"Sample_ID", "Well", "Qubit_ng_ul_pre", "Condition",
"Nanodrop_ng_ul_pre", "A260_pre", "Qubit_ng_ul_post",
"Nanodrop_ng_ul_post", "Nanodrop_unit_post", "A260_post",
"A280_post", "Ratio_260_280_post", "Ratio_260_230_post"
)
# Select and tidy
df_cleaning <- raw %>%
select(Sample_ID, Well, Qubit_ng_ul_pre, Nanodrop_ng_ul_pre,
Qubit_ng_ul_post, Nanodrop_ng_ul_post,
A260_post, A280_post, Ratio_260_280_post, Ratio_260_230_post) %>%
filter(!is.na(Sample_ID)) %>%
mutate(across(where(is.character), ~ trimws(.))) %>%
mutate(across(contains("Qubit"), as.numeric)) %>%
mutate(across(starts_with("Ratio"), as.numeric))
# Save tidy CSV
write_csv(df_cleaning, "data/processed/dna_cleanup_marly_2023.csv")
message("âœ… Cleaned DNA cleanup log saved to: data/processed/dna_cleanup_marly_2023.csv")
# Plot Qubit pre vs post
p1 <- ggplot(df_cleaning, aes(x = Qubit_ng_ul_pre, y = Qubit_ng_ul_post)) +
geom_point() +
labs(title = "Qubit: Before vs After Cleanup", x = "Before (ng/Âµl)", y = "After (ng/Âµl)") +
theme_minimal()
ggsave("results/figures/dna_cleaning/qubit_pre_vs_post.png", p1, width = 7, height = 6)
p1
# Plot 260/280 vs 260/230
p2 <- ggplot(df_cleaning, aes(x = Ratio_260_280_post, y = Ratio_260_230_post)) +
geom_point() +
labs(title = "Post-Cleanup DNA Purity Ratios", x = "260/280", y = "260/230") +
theme_minimal()
p2
ggsave("results/figures/dna_cleaning/post_cleanup_ratios.png", p2, width = 7, height = 6)
message("âœ… DNA cleanup QC plots saved.")
View(p2)
View(p1)
View(df_cleaning)
#----------------------------------------------------------*
# 3.1a: Nanodrop DNA Quality Assessment in the Field
#----------------------------------------------------------*
#message("\nðŸ”¹ Step 3.1a: Archiving early Nanodrop DNA QC (field)...")
#source(file.path(scripts_dir, "preprocessing", "01a_nanodrop_field_qc.R"))
#----------------------------------------------------------*
# 3.3: AMPure Cleanup QC (Marly)
#----------------------------------------------------------*
message("\nðŸ”¹ Step 3.3: Processing DNA cleanup QC from AMPure protocol...")
source(file.path(scripts_dir, "preprocessing", "03_dna_cleaning_qc_marly.R"))
